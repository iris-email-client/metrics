delta dManageCategoryPriority {
	modifies br.unb.cic.reminders.view.FilterListFragment {
		adds import br.unb.cic.reminders.controller.PriorityFilter;
		adds import br.unb.cic.reminders.model.Priority;
		removes onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuInfo);
		adds public void onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuInfo) {
			super.onCreateContextMenu(menu, v, menuInfo);
			menu.setHeaderTitle(R.string.context_menu_category_title);
			MenuInflater inflater = getActivity().getMenuInflater();
			if((( AdapterContextMenuInfo ) menuInfo).position < 1) {
				return;
			}
			List<Category> categories = new ArrayList<Category>();
			try {
				categories = Controller.instance(getActivity().getApplicationContext()).listCategories();
			} catch (Exception e) {
				Log.e(TAG, e.getMessage());
			}
			if((( AdapterContextMenuInfo ) menuInfo).position > categories.size()) {
				return;
			}
			inflater.inflate(R.menu.category_list_fragment_context_menu, menu);
		}
		modifies listOfFilters() {
			List<ReminderFilter> filters = original();
			// Add the priorities to the filter list
			PriorityFilter highPriorityFilter = new PriorityFilter(Priority.HIGH, getActivity());
			filters.add(highPriorityFilter);
			PriorityFilter normalPriorityFilter = new PriorityFilter(Priority.NORMAL, getActivity());
			filters.add(normalPriorityFilter);
			PriorityFilter lowPriorityFilter = new PriorityFilter(Priority.LOW, getActivity());
			filters.add(lowPriorityFilter);
			return filters;
		}
	}
}
