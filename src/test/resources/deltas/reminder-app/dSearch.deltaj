delta dSearch {
	modifies br.unb.cic.reminders.ReminderMainActivity {
		adds import android.app.AlertDialog;
		adds import android.content.Context;
		adds import android.content.DialogInterface;
		adds import android.widget.EditText;
		adds import java.util.ArrayList;
		adds public static String search = "";
	    removes onOptionsItemSelected(MenuItem item);
	    adds @Override public boolean onOptionsItemSelected(MenuItem item) {
            switch (item.getItemId()) {
                case R.id.menu_addReminder:
                    // app icon in action bar clicked; go home
                    Intent reminderIntent = new Intent(getApplicationContext(), AddReminderActivity.class);
                    startActivity(reminderIntent);
                    return true;
                case R.id.menu_searchReminder:
                    searchReminderDialog(this);
    
                default:
                    return super.onOptionsItemSelected(item);
            }
        }
        adds public void searchReminderDialog(final Context context) {
    
            final EditText etBusca = new EditText(this);
    
    
            new AlertDialog.Builder(this)
                    .setTitle("Search for a reminder")
                    //.setMessage("Paste in the link of an image to moustachify!")
                    .setView(etBusca)
                    .setCancelable(true)
                    .setPositiveButton("Search", new DialogInterface.OnClickListener() {
                        public void onClick(DialogInterface dialog, int whichButton) {
                            String text = etBusca.getText().toString();
                            ReminderMainActivity.search = text;
                            listReminderFragment.updateListViewFilter(text);
                        }
    
                    })
                    .setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
                        public void onClick(DialogInterface dialog, int whichButton) {
                            ReminderMainActivity.search = null;
                            listReminderFragment.updateListView(null);
                        }
                    })
                    .show();
    
    
        }
	}
    modifies br.unb.cic.reminders.controller.ReminderFilter {
        adds public List<Reminder> getReminders(String search){
            updateReminders();
            if(search == null || search.trim().equals("")){
                updateReminders();
                return reminders;
            }
            List<Reminder> values = new ArrayList<Reminder>();
            for  (Reminder item: this.reminders){
                if(item.getText().contains(search)){
                    values.add(item);
                }
            }
            return values;
        }
    }
    modifies br.unb.cic.reminders.view.ReminderListFragment {
        adds public void updateListViewFilter(String filterRemider) {
    
            ReminderFilter filter = new AllRemindersFilter(getActivity());
            ArrayList<Reminder>reminders = new ArrayList<Reminder>();
            for  (Reminder item: filter.getReminderList()){
    
                if(item.getText().contains(filterRemider)){
                    reminders.add(item);
                }
            }
    
            adapter = new ReminderArrayAdapter(getActivity().getApplicationContext(), reminders);
    
    
    
            // Divide the adapter in 4 possibilities of dates(Late, Today, Next Days
            // and No Date)
            // and distribute it to each responsible ListView:
            ReminderArrayAdapter adapterLate, adapterToday, adapterNextDays, adapterNoDate;
    
            Reminder r = new Reminder();
            List<Reminder> remindersLate = new ArrayList<Reminder>();
            List<Reminder> remindersToday = new ArrayList<Reminder>();
            List<Reminder> remindersNextDays = new ArrayList<Reminder>();
            List<Reminder> remindersNoDate = new ArrayList<Reminder>();
    
            // Runs through the adapter and divides to the correspondent adapter
            for (int i = 0; i < adapter.getCount(); ++i) {
                r = adapter.getItem(i);
                if (r.getDate() != null) {
                    String day = r.getDate().substring(0, 2);
                    String month = r.getDate().substring(3, 5);
                    String year = r.getDate().substring(6, 10);
    
                    Calendar cal = Calendar.getInstance();
                    GregorianCalendar gc = new GregorianCalendar();
                    if (r.getHour() != null) {
                        String hour = r.getHour().substring(0, 2);
                        String min = r.getHour().substring(3, 5);
                        gc.set(Integer.parseInt(year), Integer.parseInt(month) - 1, Integer.parseInt(day),
                                Integer.parseInt(hour), Integer.parseInt(min));
                    } else {
                        gc.set(Integer.parseInt(year), Integer.parseInt(month) - 1, Integer.parseInt(day));
                    }
                    // if(Integer.parseInt(day)<cal.get(Calendar.DAY_OF_MONTH))
                    if (gc.before(cal))
                        remindersLate.add(r);
                    else if ((cal.get(Calendar.YEAR) == gc.get(Calendar.YEAR))
                            && (cal.get(Calendar.MONTH) == gc.get(Calendar.MONTH))
                            && (cal.get(Calendar.DAY_OF_MONTH) == gc.get(Calendar.DAY_OF_MONTH)))
                        remindersToday.add(r);
                    else
                        remindersNextDays.add(r);
                } else {
                    remindersNoDate.add(r);
                }
            }
    
            // Creates each adapter:
            adapterLate = new ReminderArrayAdapter(getActivity().getApplicationContext(), remindersLate,
                    Color.rgb(0xED, 0x1C, 0x24), ReminderArrayAdapter.LATE);
            adapterToday = new ReminderArrayAdapter(getActivity().getApplicationContext(), remindersToday,
                    Color.rgb(0x33, 0xB5, 0xE5), ReminderArrayAdapter.TODAY);
            adapterNextDays = new ReminderArrayAdapter(getActivity().getApplicationContext(), remindersNextDays,
                    Color.rgb(0x99, 0x99, 0x99), ReminderArrayAdapter.NEXT_DAYS);
            adapterNoDate = new ReminderArrayAdapter(getActivity().getApplicationContext(), remindersNoDate,
                    Color.rgb(0x00, 0x00, 0x00), ReminderArrayAdapter.NO_DATE);
    
            // Apply the adapters and rearrange the ListViews to its contents size:
            lvReminderLate.setAdapter(adapterLate);
            Utility.setListViewHeightBasedOnChildren(lvReminderLate);
            lvReminderToday.setAdapter(adapterToday);
            Utility.setListViewHeightBasedOnChildren(lvReminderToday);
            lvReminderNextDays.setAdapter(adapterNextDays);
            Utility.setListViewHeightBasedOnChildren(lvReminderNextDays);
            lvReminderNoDate.setAdapter(adapterNoDate);
            Utility.setListViewHeightBasedOnChildren(lvReminderNoDate);
        }
    }
}
